
LAB2-ADC-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa4  08004fa4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fac  08004fac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000005c  08005010  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005010  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a11  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002311  00000000  00000000  00031ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00033df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af7  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026671  00000000  00000000  00035737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d2d  00000000  00000000  0005bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fef11  00000000  00000000  0006cad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c38  00000000  00000000  0016b9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0016f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004f4c 	.word	0x08004f4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08004f4c 	.word	0x08004f4c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc07 	bl	8000d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80d 	bl	800053a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f952 	bl	80007c8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f906 	bl	8000734 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000528:	f000 f852 	bl	80005d0 <MX_ADC1_Init>
  MX_DAC1_Init();
 800052c:	f000 f8c8 	bl	80006c0 <MX_DAC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Read_blocking();
 8000530:	f000 f9b8 	bl	80008a4 <ADC_Read_blocking>
	  DAC_Update();
 8000534:	f000 fa56 	bl	80009e4 <DAC_Update>
	  ADC_Read_blocking();
 8000538:	e7fa      	b.n	8000530 <main+0x1c>

0800053a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b094      	sub	sp, #80	; 0x50
 800053e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	2238      	movs	r2, #56	; 0x38
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f004 fcd3 	bl	8004ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800055c:	2000      	movs	r0, #0
 800055e:	f002 fe8f 	bl	8003280 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2340      	movs	r3, #64	; 0x40
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000578:	2304      	movs	r3, #4
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800057c:	2355      	movs	r3, #85	; 0x55
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4618      	mov	r0, r3
 8000592:	f002 ff29 	bl	80033e8 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800059c:	f000 fa44 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2303      	movs	r3, #3
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2104      	movs	r1, #4
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fa2d 	bl	8003a18 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005c4:	f000 fa30 	bl	8000a28 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	; 0x30
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2220      	movs	r2, #32
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fc83 	bl	8004ef4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005ee:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80005f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f6:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80005f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000600:	2208      	movs	r2, #8
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000618:	2204      	movs	r2, #4
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800062a:	2201      	movs	r2, #1
 800062c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	; (80006b8 <MX_ADC1_Init+0xe8>)
 800065a:	f000 fe77 	bl	800134c <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000664:	f000 f9e0 	bl	8000a28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_ADC1_Init+0xe8>)
 8000674:	f002 f83c 	bl	80026f0 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 f9d3 	bl	8000a28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_ADC1_Init+0xec>)
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	; 0x7f
 8000690:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <MX_ADC1_Init+0xe8>)
 80006a0:	f001 fa42 	bl	8001b28 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006aa:	f000 f9bd 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3730      	adds	r7, #48	; 0x30
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000078 	.word	0x20000078
 80006bc:	04300002 	.word	0x04300002

080006c0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2230      	movs	r2, #48	; 0x30
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fc11 	bl	8004ef4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_DAC1_Init+0x6c>)
 80006d4:	4a16      	ldr	r2, [pc, #88]	; (8000730 <MX_DAC1_Init+0x70>)
 80006d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_DAC1_Init+0x6c>)
 80006da:	f002 fa20 	bl	8002b1e <HAL_DAC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006e4:	f000 f9a0 	bl	8000a28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80006e8:	2302      	movs	r3, #2
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000704:	2301      	movs	r3, #1
 8000706:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000708:	2300      	movs	r3, #0
 800070a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_DAC1_Init+0x6c>)
 8000714:	f002 fa4e 	bl	8002bb4 <HAL_DAC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800071e:	f000 f983 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3730      	adds	r7, #48	; 0x30
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000e4 	.word	0x200000e4
 8000730:	50000800 	.word	0x50000800

08000734 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	4a22      	ldr	r2, [pc, #136]	; (80007c4 <MX_LPUART1_UART_Init+0x90>)
 800073c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	f003 fdb8 	bl	80042ec <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f951 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	f004 fae9 	bl	8004d60 <HAL_UARTEx_SetTxFifoThreshold>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000794:	f000 f948 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 800079c:	f004 fb1e 	bl	8004ddc <HAL_UARTEx_SetRxFifoThreshold>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007a6:	f000 f93f 	bl	8000a28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f004 fa9f 	bl	8004cee <HAL_UARTEx_DisableFifoMode>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007b6:	f000 f937 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000f8 	.word	0x200000f8
 80007c4:	40008000 	.word	0x40008000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <MX_GPIO_Init+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a2e      	ldr	r2, [pc, #184]	; (800089c <MX_GPIO_Init+0xd4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b2c      	ldr	r3, [pc, #176]	; (800089c <MX_GPIO_Init+0xd4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_GPIO_Init+0xd4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a28      	ldr	r2, [pc, #160]	; (800089c <MX_GPIO_Init+0xd4>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_GPIO_Init+0xd4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_GPIO_Init+0xd4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_GPIO_Init+0xd4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_GPIO_Init+0xd4>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_GPIO_Init+0xd4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_GPIO_Init+0xd4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_GPIO_Init+0xd4>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f002 fcdf 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000850:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <MX_GPIO_Init+0xd8>)
 8000862:	f002 fb4f 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f002 fb40 	bl	8002f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2028      	movs	r0, #40	; 0x28
 800088a:	f002 f914 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088e:	2028      	movs	r0, #40	; 0x28
 8000890:	f002 f92b 	bl	8002aea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000800 	.word	0x48000800

080008a4 <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
//ADC Function
void ADC_Read_blocking()
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	static uint32_t TimeStamp = 0;
	LSB = Voltage_Ref / ADC_Resolution;
 80008aa:	4b33      	ldr	r3, [pc, #204]	; (8000978 <ADC_Read_blocking+0xd4>)
 80008ac:	edd3 6a00 	vldr	s13, [r3]
 80008b0:	4b32      	ldr	r3, [pc, #200]	; (800097c <ADC_Read_blocking+0xd8>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008c0:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <ADC_Read_blocking+0xdc>)
 80008c2:	edc3 7a00 	vstr	s15, [r3]

	if( HAL_GetTick()<TimeStamp) return;
 80008c6:	f000 fa95 	bl	8000df4 <HAL_GetTick>
 80008ca:	4602      	mov	r2, r0
 80008cc:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <ADC_Read_blocking+0xe0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d34c      	bcc.n	800096e <ADC_Read_blocking+0xca>

	TimeStamp = HAL_GetTick()+500;
 80008d4:	f000 fa8e 	bl	8000df4 <HAL_GetTick>
 80008d8:	4603      	mov	r3, r0
 80008da:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80008de:	4a29      	ldr	r2, [pc, #164]	; (8000984 <ADC_Read_blocking+0xe0>)
 80008e0:	6013      	str	r3, [r2, #0]

	for(int i=0;i<2;i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	e03e      	b.n	8000966 <ADC_Read_blocking+0xc2>
	{
		HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[i].Config);
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <ADC_Read_blocking+0xe4>)
 80008f4:	4413      	add	r3, r2
 80008f6:	4619      	mov	r1, r3
 80008f8:	4824      	ldr	r0, [pc, #144]	; (800098c <ADC_Read_blocking+0xe8>)
 80008fa:	f001 f915 	bl	8001b28 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc1);
 80008fe:	4823      	ldr	r0, [pc, #140]	; (800098c <ADC_Read_blocking+0xe8>)
 8000900:	f000 fee6 	bl	80016d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000904:	2164      	movs	r1, #100	; 0x64
 8000906:	4821      	ldr	r0, [pc, #132]	; (800098c <ADC_Read_blocking+0xe8>)
 8000908:	f000 fffa 	bl	8001900 <HAL_ADC_PollForConversion>
		ADC1_Channel[i].data = HAL_ADC_GetValue(&hadc1);
 800090c:	481f      	ldr	r0, [pc, #124]	; (800098c <ADC_Read_blocking+0xe8>)
 800090e:	f001 f8fd 	bl	8001b0c <HAL_ADC_GetValue>
 8000912:	4603      	mov	r3, r0
 8000914:	b298      	uxth	r0, r3
 8000916:	491c      	ldr	r1, [pc, #112]	; (8000988 <ADC_Read_blocking+0xe4>)
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	4613      	mov	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	4413      	add	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	3320      	adds	r3, #32
 8000926:	4602      	mov	r2, r0
 8000928:	801a      	strh	r2, [r3, #0]
		Voltage_Read[i] = LSB * ADC1_Channel[i].data;
 800092a:	4917      	ldr	r1, [pc, #92]	; (8000988 <ADC_Read_blocking+0xe4>)
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4613      	mov	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	440b      	add	r3, r1
 8000938:	3320      	adds	r3, #32
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <ADC_Read_blocking+0xdc>)
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <ADC_Read_blocking+0xec>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4413      	add	r3, r2
 8000956:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 800095a:	480c      	ldr	r0, [pc, #48]	; (800098c <ADC_Read_blocking+0xe8>)
 800095c:	f000 ff9c 	bl	8001898 <HAL_ADC_Stop>
	for(int i=0;i<2;i++)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b01      	cmp	r3, #1
 800096a:	ddbd      	ble.n	80008e8 <ADC_Read_blocking+0x44>
 800096c:	e000      	b.n	8000970 <ADC_Read_blocking+0xcc>
	if( HAL_GetTick()<TimeStamp) return;
 800096e:	bf00      	nop
	}
}
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000048 	.word	0x20000048
 800097c:	2000004c 	.word	0x2000004c
 8000980:	20000190 	.word	0x20000190
 8000984:	2000019c 	.word	0x2000019c
 8000988:	20000000 	.word	0x20000000
 800098c:	20000078 	.word	0x20000078
 8000990:	20000188 	.word	0x20000188

08000994 <OutV_to_DAC>:

//DAC Function
void OutV_to_DAC()
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	DAC_Output = (Voltage_Output / Voltage_Ref) * (DAC_Resolution - 1);
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <OutV_to_DAC+0x40>)
 800099a:	edd3 6a00 	vldr	s13, [r3]
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <OutV_to_DAC+0x44>)
 80009a0:	edd3 7a00 	vldr	s15, [r3]
 80009a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <OutV_to_DAC+0x48>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009be:	ee17 3a90 	vmov	r3, s15
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <OutV_to_DAC+0x4c>)
 80009c6:	801a      	strh	r2, [r3, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000198 	.word	0x20000198
 80009d8:	20000048 	.word	0x20000048
 80009dc:	2000004e 	.word	0x2000004e
 80009e0:	20000194 	.word	0x20000194

080009e4 <DAC_Update>:
void DAC_Update()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	static uint32_t timeStamp = 0;
	if(HAL_GetTick() > timeStamp)
 80009e8:	f000 fa04 	bl	8000df4 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <DAC_Update+0x38>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d90f      	bls.n	8000a16 <DAC_Update+0x32>
	{
		timeStamp = HAL_GetTick() + 500;
 80009f6:	f000 f9fd 	bl	8000df4 <HAL_GetTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <DAC_Update+0x38>)
 8000a02:	6013      	str	r3, [r2, #0]
		OutV_to_DAC();
 8000a04:	f7ff ffc6 	bl	8000994 <OutV_to_DAC>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <DAC_Update+0x3c>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <DAC_Update+0x40>)
 8000a12:	f002 f8a6 	bl	8002b62 <HAL_DAC_SetValue>
	}
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001a0 	.word	0x200001a0
 8000a20:	20000194 	.word	0x20000194
 8000a24:	200000e4 	.word	0x200000e4

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_MspInit+0x44>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6613      	str	r3, [r2, #96]	; 0x60
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a6a:	f002 fcad 	bl	80033c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40021000 	.word	0x40021000

08000a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b09e      	sub	sp, #120	; 0x78
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	2254      	movs	r2, #84	; 0x54
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f004 fa29 	bl	8004ef4 <memset>
  if(hadc->Instance==ADC1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aaa:	d134      	bne.n	8000b16 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ab2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ab6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 f9c7 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ac8:	f7ff ffae 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_ADC_MspInit+0xa4>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_ADC_MspInit+0xa4>)
 8000ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_ADC_MspInit+0xa4>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_ADC_MspInit+0xa4>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_ADC_MspInit+0xa4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_ADC_MspInit+0xa4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afc:	2301      	movs	r3, #1
 8000afe:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b00:	2303      	movs	r3, #3
 8000b02:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f002 f9f7 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3778      	adds	r7, #120	; 0x78
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_DAC_MspInit+0x74>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d124      	bne.n	8000b90 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_DAC_MspInit+0x78>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_DAC_MspInit+0x78>)
 8000b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_DAC_MspInit+0x78>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_DAC_MspInit+0x78>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_DAC_MspInit+0x78>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_DAC_MspInit+0x78>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b76:	2310      	movs	r3, #16
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f002 f9ba 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	50000800 	.word	0x50000800
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09e      	sub	sp, #120	; 0x78
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	2254      	movs	r2, #84	; 0x54
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 f997 	bl	8004ef4 <memset>
  if(huart->Instance==LPUART1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_UART_MspInit+0xa8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d136      	bne.n	8000c3e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 f937 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be8:	f7ff ff1e 	bl	8000a28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0xac>)
 8000bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf0:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <HAL_UART_MspInit+0xac>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_UART_MspInit+0xac>)
 8000bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0xac>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_UART_MspInit+0xac>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_UART_MspInit+0xac>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c1c:	230c      	movs	r3, #12
 8000c1e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f002 f963 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3778      	adds	r7, #120	; 0x78
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40008000 	.word	0x40008000
 8000c4c:	40021000 	.word	0x40021000

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f898 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cac:	f002 fac4 	bl	8003238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d02:	f7ff ffd7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f004 f8fd 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fc03 	bl	8000514 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   r0, =_estack
 8000d10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d1c:	08004fb4 	.word	0x08004fb4
  ldr r2, =_sbss
 8000d20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d24:	200001a8 	.word	0x200001a8

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>

08000d2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f001 feb3 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f80e 	bl	8000d5c <HAL_InitTick>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e001      	b.n	8000d50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4c:	f7ff fe72 	bl	8000a34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d50:	79fb      	ldrb	r3, [r7, #7]

}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_InitTick+0x68>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d022      	beq.n	8000db6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_InitTick+0x6c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_InitTick+0x68>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 febe 	bl	8002b06 <HAL_SYSTICK_Config>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10f      	bne.n	8000db0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d809      	bhi.n	8000daa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d96:	2200      	movs	r2, #0
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9e:	f001 fe8a 	bl	8002ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_InitTick+0x70>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e007      	b.n	8000dba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	e004      	b.n	8000dba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e001      	b.n	8000dba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000058 	.word	0x20000058
 8000dc8:	20000050 	.word	0x20000050
 8000dcc:	20000054 	.word	0x20000054

08000dd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x1c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x20>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a03      	ldr	r2, [pc, #12]	; (8000dec <HAL_IncTick+0x1c>)
 8000de0:	6013      	str	r3, [r2, #0]
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	200001a4 	.word	0x200001a4
 8000df0:	20000058 	.word	0x20000058

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200001a4 	.word	0x200001a4

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d004      	beq.n	8000e30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_Delay+0x40>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e30:	bf00      	nop
 8000e32:	f7ff ffdf 	bl	8000df4 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8f7      	bhi.n	8000e32 <HAL_Delay+0x26>
  {
  }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000058 	.word	0x20000058

08000e50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	609a      	str	r2, [r3, #8]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3360      	adds	r3, #96	; 0x60
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <LL_ADC_SetOffset+0x44>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ef0:	bf00      	nop
 8000ef2:	371c      	adds	r7, #28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	03fff000 	.word	0x03fff000

08000f00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3360      	adds	r3, #96	; 0x60
 8000f0e:	461a      	mov	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3360      	adds	r3, #96	; 0x60
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b087      	sub	sp, #28
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3360      	adds	r3, #96	; 0x60
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3360      	adds	r3, #96	; 0x60
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	615a      	str	r2, [r3, #20]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3330      	adds	r3, #48	; 0x30
 800102a:	461a      	mov	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	4413      	add	r3, r2
 8001038:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	211f      	movs	r1, #31
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	401a      	ands	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	0e9b      	lsrs	r3, r3, #26
 8001052:	f003 011f 	and.w	r1, r3, #31
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	431a      	orrs	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001072:	b480      	push	{r7}
 8001074:	b087      	sub	sp, #28
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3314      	adds	r3, #20
 8001082:	461a      	mov	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	0e5b      	lsrs	r3, r3, #25
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	0d1b      	lsrs	r3, r3, #20
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2107      	movs	r1, #7
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	401a      	ands	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	0d1b      	lsrs	r3, r3, #20
 80010ac:	f003 031f 	and.w	r3, r3, #31
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d10a      	bne.n	80010f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e8:	431a      	orrs	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80010f0:	e00a      	b.n	8001108 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	407f0000 	.word	0x407f0000

08001118 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 031f 	and.w	r3, r3, #31
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6093      	str	r3, [r2, #8]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001188:	d101      	bne.n	800118e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011d8:	d101      	bne.n	80011de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001200:	f043 0201 	orr.w	r2, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001228:	f043 0202 	orr.w	r2, r3, #2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <LL_ADC_IsEnabled+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_ADC_IsEnabled+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b02      	cmp	r3, #2
 8001274:	d101      	bne.n	800127a <LL_ADC_IsDisableOngoing+0x18>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <LL_ADC_IsDisableOngoing+0x1a>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800129c:	f043 0204 	orr.w	r2, r3, #4
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012c4:	f043 0210 	orr.w	r2, r3, #16
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d101      	bne.n	80012f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800130e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001312:	f043 0220 	orr.w	r2, r3, #32
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b08      	cmp	r3, #8
 8001338:	d101      	bne.n	800133e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e1af      	b.n	80016c6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fb81 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fef1 	bl	8001174 <LL_ADC_IsDeepPowerDownEnabled>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fed7 	bl	8001150 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff0c 	bl	80011c4 <LL_ADC_IsInternalRegulatorEnabled>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d115      	bne.n	80013de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fef0 	bl	800119c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013bc:	4b9f      	ldr	r3, [pc, #636]	; (800163c <HAL_ADC_Init+0x2f0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	4a9f      	ldr	r2, [pc, #636]	; (8001640 <HAL_ADC_Init+0x2f4>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	099b      	lsrs	r3, r3, #6
 80013ca:	3301      	adds	r3, #1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d0:	e002      	b.n	80013d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff feee 	bl	80011c4 <LL_ADC_IsInternalRegulatorEnabled>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f2:	f043 0210 	orr.w	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff62 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 8001414:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	f040 8148 	bne.w	80016b4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 8144 	bne.w	80016b4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001434:	f043 0202 	orr.w	r2, r3, #2
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fefb 	bl	800123c <LL_ADC_IsEnabled>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d141      	bne.n	80014d0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001454:	d004      	beq.n	8001460 <HAL_ADC_Init+0x114>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a7a      	ldr	r2, [pc, #488]	; (8001644 <HAL_ADC_Init+0x2f8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d10f      	bne.n	8001480 <HAL_ADC_Init+0x134>
 8001460:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001464:	f7ff feea 	bl	800123c <LL_ADC_IsEnabled>
 8001468:	4604      	mov	r4, r0
 800146a:	4876      	ldr	r0, [pc, #472]	; (8001644 <HAL_ADC_Init+0x2f8>)
 800146c:	f7ff fee6 	bl	800123c <LL_ADC_IsEnabled>
 8001470:	4603      	mov	r3, r0
 8001472:	4323      	orrs	r3, r4
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	e012      	b.n	80014a6 <HAL_ADC_Init+0x15a>
 8001480:	4871      	ldr	r0, [pc, #452]	; (8001648 <HAL_ADC_Init+0x2fc>)
 8001482:	f7ff fedb 	bl	800123c <LL_ADC_IsEnabled>
 8001486:	4604      	mov	r4, r0
 8001488:	4870      	ldr	r0, [pc, #448]	; (800164c <HAL_ADC_Init+0x300>)
 800148a:	f7ff fed7 	bl	800123c <LL_ADC_IsEnabled>
 800148e:	4603      	mov	r3, r0
 8001490:	431c      	orrs	r4, r3
 8001492:	486f      	ldr	r0, [pc, #444]	; (8001650 <HAL_ADC_Init+0x304>)
 8001494:	f7ff fed2 	bl	800123c <LL_ADC_IsEnabled>
 8001498:	4603      	mov	r3, r0
 800149a:	4323      	orrs	r3, r4
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d012      	beq.n	80014d0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b2:	d004      	beq.n	80014be <HAL_ADC_Init+0x172>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a62      	ldr	r2, [pc, #392]	; (8001644 <HAL_ADC_Init+0x2f8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_ADC_Init+0x176>
 80014be:	4a65      	ldr	r2, [pc, #404]	; (8001654 <HAL_ADC_Init+0x308>)
 80014c0:	e000      	b.n	80014c4 <HAL_ADC_Init+0x178>
 80014c2:	4a65      	ldr	r2, [pc, #404]	; (8001658 <HAL_ADC_Init+0x30c>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fcc0 	bl	8000e50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7f5b      	ldrb	r3, [r3, #29]
 80014d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d106      	bne.n	800150c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	3b01      	subs	r3, #1
 8001504:	045b      	lsls	r3, r3, #17
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	4b4b      	ldr	r3, [pc, #300]	; (800165c <HAL_ADC_Init+0x310>)
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	430b      	orrs	r3, r1
 800153a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff febe 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 800155c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fedf 	bl	8001326 <LL_ADC_INJ_IsConversionOngoing>
 8001568:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d17f      	bne.n	8001670 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d17c      	bne.n	8001670 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800157a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001582:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001592:	f023 0302 	bic.w	r3, r3, #2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	69b9      	ldr	r1, [r7, #24]
 800159c:	430b      	orrs	r3, r1
 800159e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d017      	beq.n	80015d8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691a      	ldr	r2, [r3, #16]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80015b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6911      	ldr	r1, [r2, #16]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80015d6:	e013      	b.n	8001600 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001606:	2b01      	cmp	r3, #1
 8001608:	d12a      	bne.n	8001660 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001620:	4311      	orrs	r1, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001626:	4311      	orrs	r1, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800162c:	430a      	orrs	r2, r1
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	611a      	str	r2, [r3, #16]
 800163a:	e019      	b.n	8001670 <HAL_ADC_Init+0x324>
 800163c:	20000050 	.word	0x20000050
 8001640:	053e2d63 	.word	0x053e2d63
 8001644:	50000100 	.word	0x50000100
 8001648:	50000400 	.word	0x50000400
 800164c:	50000500 	.word	0x50000500
 8001650:	50000600 	.word	0x50000600
 8001654:	50000300 	.word	0x50000300
 8001658:	50000700 	.word	0x50000700
 800165c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d10c      	bne.n	8001692 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f023 010f 	bic.w	r1, r3, #15
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	1e5a      	subs	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
 8001690:	e007      	b.n	80016a2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 020f 	bic.w	r2, r2, #15
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	f043 0201 	orr.w	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b2:	e007      	b.n	80016c4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	bf00      	nop

080016d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e0:	d004      	beq.n	80016ec <HAL_ADC_Start+0x1c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a67      	ldr	r2, [pc, #412]	; (8001884 <HAL_ADC_Start+0x1b4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_Start+0x20>
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <HAL_ADC_Start+0x1b8>)
 80016ee:	e000      	b.n	80016f2 <HAL_ADC_Start+0x22>
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_ADC_Start+0x1bc>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd10 	bl	8001118 <LL_ADC_GetMultimode>
 80016f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fdea 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f040 80b4 	bne.w	8001874 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ADC_Start+0x4a>
 8001716:	2302      	movs	r3, #2
 8001718:	e0af      	b.n	800187a <HAL_ADC_Start+0x1aa>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fefc 	bl	8002520 <ADC_Enable>
 8001728:	4603      	mov	r3, r0
 800172a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800172c:	7dfb      	ldrb	r3, [r7, #23]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 809b 	bne.w	800186a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4d      	ldr	r2, [pc, #308]	; (8001884 <HAL_ADC_Start+0x1b4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d009      	beq.n	8001766 <HAL_ADC_Start+0x96>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_ADC_Start+0x1c0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d002      	beq.n	8001762 <HAL_ADC_Start+0x92>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	e003      	b.n	800176a <HAL_ADC_Start+0x9a>
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_ADC_Start+0x1c4>)
 8001764:	e001      	b.n	800176a <HAL_ADC_Start+0x9a>
 8001766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	4293      	cmp	r3, r2
 8001770:	d002      	beq.n	8001778 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001790:	d106      	bne.n	80017a0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001796:	f023 0206 	bic.w	r2, r3, #6
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	661a      	str	r2, [r3, #96]	; 0x60
 800179e:	e002      	b.n	80017a6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	221c      	movs	r2, #28
 80017ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a32      	ldr	r2, [pc, #200]	; (8001884 <HAL_ADC_Start+0x1b4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_ADC_Start+0x104>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a32      	ldr	r2, [pc, #200]	; (8001890 <HAL_ADC_Start+0x1c0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d002      	beq.n	80017d0 <HAL_ADC_Start+0x100>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e003      	b.n	80017d8 <HAL_ADC_Start+0x108>
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_ADC_Start+0x1c4>)
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Start+0x108>
 80017d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	d008      	beq.n	80017f2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b09      	cmp	r3, #9
 80017f0:	d114      	bne.n	800181c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001808:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fd37 	bl	8001288 <LL_ADC_REG_StartConversion>
 800181a:	e02d      	b.n	8001878 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a15      	ldr	r2, [pc, #84]	; (8001884 <HAL_ADC_Start+0x1b4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d009      	beq.n	8001846 <HAL_ADC_Start+0x176>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_ADC_Start+0x1c0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d002      	beq.n	8001842 <HAL_ADC_Start+0x172>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e003      	b.n	800184a <HAL_ADC_Start+0x17a>
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_ADC_Start+0x1c4>)
 8001844:	e001      	b.n	800184a <HAL_ADC_Start+0x17a>
 8001846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800184a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00f      	beq.n	8001878 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001860:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	65da      	str	r2, [r3, #92]	; 0x5c
 8001868:	e006      	b.n	8001878 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001872:	e001      	b.n	8001878 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001874:	2302      	movs	r3, #2
 8001876:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001878:	7dfb      	ldrb	r3, [r7, #23]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	50000100 	.word	0x50000100
 8001888:	50000300 	.word	0x50000300
 800188c:	50000700 	.word	0x50000700
 8001890:	50000500 	.word	0x50000500
 8001894:	50000400 	.word	0x50000400

08001898 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Stop+0x16>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e023      	b.n	80018f6 <HAL_ADC_Stop+0x5e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80018b6:	2103      	movs	r1, #3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fd75 	bl	80023a8 <ADC_ConversionStop>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d111      	bne.n	80018ec <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fe8b 	bl	80025e4 <ADC_Disable>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018e0:	f023 0301 	bic.w	r3, r3, #1
 80018e4:	f043 0201 	orr.w	r2, r3, #1
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001912:	d004      	beq.n	800191e <HAL_ADC_PollForConversion+0x1e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_ADC_PollForConversion+0x1f8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_ADC_PollForConversion+0x22>
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_ADC_PollForConversion+0x1fc>)
 8001920:	e000      	b.n	8001924 <HAL_ADC_PollForConversion+0x24>
 8001922:	4b77      	ldr	r3, [pc, #476]	; (8001b00 <HAL_ADC_PollForConversion+0x200>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fbf7 	bl	8001118 <LL_ADC_GetMultimode>
 800192a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d102      	bne.n	800193a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001934:	2308      	movs	r3, #8
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	e037      	b.n	80019aa <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d002      	beq.n	800194c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b09      	cmp	r3, #9
 800194a:	d111      	bne.n	8001970 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	f043 0220 	orr.w	r2, r3, #32
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0c1      	b.n	8001aee <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800196a:	2304      	movs	r3, #4
 800196c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800196e:	e01c      	b.n	80019aa <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001978:	d004      	beq.n	8001984 <HAL_ADC_PollForConversion+0x84>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a5e      	ldr	r2, [pc, #376]	; (8001af8 <HAL_ADC_PollForConversion+0x1f8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_ADC_PollForConversion+0x88>
 8001984:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_ADC_PollForConversion+0x1fc>)
 8001986:	e000      	b.n	800198a <HAL_ADC_PollForConversion+0x8a>
 8001988:	4b5d      	ldr	r3, [pc, #372]	; (8001b00 <HAL_ADC_PollForConversion+0x200>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fbd2 	bl	8001134 <LL_ADC_GetMultiDMATransfer>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	f043 0220 	orr.w	r2, r3, #32
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0a3      	b.n	8001aee <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019a6:	2304      	movs	r3, #4
 80019a8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019aa:	f7ff fa23 	bl	8000df4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019b0:	e021      	b.n	80019f6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d01d      	beq.n	80019f6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019ba:	f7ff fa1b 	bl	8000df4 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d302      	bcc.n	80019d0 <HAL_ADC_PollForConversion+0xd0>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d112      	bne.n	80019f6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4013      	ands	r3, r2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10b      	bne.n	80019f6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	f043 0204 	orr.w	r2, r3, #4
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e07b      	b.n	8001aee <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0d6      	beq.n	80019b2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff faed 	bl	8000ff4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01c      	beq.n	8001a5a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7f5b      	ldrb	r3, [r3, #29]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d118      	bne.n	8001a5a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d111      	bne.n	8001a5a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <HAL_ADC_PollForConversion+0x1f8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d009      	beq.n	8001a78 <HAL_ADC_PollForConversion+0x178>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <HAL_ADC_PollForConversion+0x204>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d002      	beq.n	8001a74 <HAL_ADC_PollForConversion+0x174>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	e003      	b.n	8001a7c <HAL_ADC_PollForConversion+0x17c>
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_ADC_PollForConversion+0x208>)
 8001a76:	e001      	b.n	8001a7c <HAL_ADC_PollForConversion+0x17c>
 8001a78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d008      	beq.n	8001a96 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d002      	beq.n	8001a96 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	d104      	bne.n	8001aa0 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e014      	b.n	8001aca <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_ADC_PollForConversion+0x1f8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_ADC_PollForConversion+0x1be>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <HAL_ADC_PollForConversion+0x204>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_ADC_PollForConversion+0x1ba>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e003      	b.n	8001ac2 <HAL_ADC_PollForConversion+0x1c2>
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_ADC_PollForConversion+0x208>)
 8001abc:	e001      	b.n	8001ac2 <HAL_ADC_PollForConversion+0x1c2>
 8001abe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ac2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d104      	bne.n	8001ada <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e008      	b.n	8001aec <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	220c      	movs	r2, #12
 8001aea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	50000100 	.word	0x50000100
 8001afc:	50000300 	.word	0x50000300
 8001b00:	50000700 	.word	0x50000700
 8001b04:	50000500 	.word	0x50000500
 8001b08:	50000400 	.word	0x50000400

08001b0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b0b6      	sub	sp, #216	; 0xd8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x24>
 8001b46:	2302      	movs	r3, #2
 8001b48:	f000 bc13 	b.w	8002372 <HAL_ADC_ConfigChannel+0x84a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fbbd 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f040 83f3 	bne.w	800234c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6818      	ldr	r0, [r3, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6859      	ldr	r1, [r3, #4]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f7ff fa51 	bl	800101a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fbab 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 8001b82:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fbcb 	bl	8001326 <LL_ADC_INJ_IsConversionOngoing>
 8001b90:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f040 81d9 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 81d4 	bne.w	8001f50 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bb0:	d10f      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f7ff fa58 	bl	8001072 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f9ff 	bl	8000fce <LL_ADC_SetSamplingTimeCommonConfig>
 8001bd0:	e00e      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6819      	ldr	r1, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	461a      	mov	r2, r3
 8001be0:	f7ff fa47 	bl	8001072 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f9ef 	bl	8000fce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	08db      	lsrs	r3, r3, #3
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d022      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	6919      	ldr	r1, [r3, #16]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c22:	f7ff f949 	bl	8000eb8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6919      	ldr	r1, [r3, #16]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f7ff f995 	bl	8000f62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6919      	ldr	r1, [r3, #16]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7f1b      	ldrb	r3, [r3, #28]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d102      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x126>
 8001c48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4c:	e000      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x128>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	461a      	mov	r2, r3
 8001c52:	f7ff f9a1 	bl	8000f98 <LL_ADC_SetOffsetSaturation>
 8001c56:	e17b      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f94e 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10a      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x15c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f943 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	f003 021f 	and.w	r2, r3, #31
 8001c82:	e01e      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x19a>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f938 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	e004      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x1b2>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0e9b      	lsrs	r3, r3, #26
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	e018      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1e4>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ce6:	fa93 f3a3 	rbit	r3, r3
 8001cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e004      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d106      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff f907 	bl	8000f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2101      	movs	r1, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f8eb 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x222>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f8e0 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	e01e      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x260>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff f8d5 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e004      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x278>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	e018      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x2aa>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2101      	movs	r1, #1
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f8a4 	bl	8000f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2102      	movs	r1, #2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f888 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10a      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x2e8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2102      	movs	r1, #2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f87d 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	0e9b      	lsrs	r3, r3, #26
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	e01e      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x326>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f872 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e004      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x33e>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	e016      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x36c>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001e86:	2320      	movs	r3, #32
 8001e88:	e004      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff f843 	bl	8000f2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2103      	movs	r1, #3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f827 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10a      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x3aa>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f81c 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	e017      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x3da>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff f811 	bl	8000f00 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001ef4:	2320      	movs	r3, #32
 8001ef6:	e003      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x3f2>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	e011      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x416>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e003      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d106      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	2103      	movs	r1, #3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ffee 	bl	8000f2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f971 	bl	800123c <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 813d 	bne.w	80021dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f7ff f8aa 	bl	80010c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4aa2      	ldr	r2, [pc, #648]	; (8002204 <HAL_ADC_ConfigChannel+0x6dc>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f040 812e 	bne.w	80021dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x480>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0e9b      	lsrs	r3, r3, #26
 8001f96:	3301      	adds	r3, #1
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2b09      	cmp	r3, #9
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e019      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x4b4>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001fc0:	2320      	movs	r3, #32
 8001fc2:	e003      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2b09      	cmp	r3, #9
 8001fd4:	bf94      	ite	ls
 8001fd6:	2301      	movls	r3, #1
 8001fd8:	2300      	movhi	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d079      	beq.n	80020d4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x4d4>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0e9b      	lsrs	r3, r3, #26
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	069b      	lsls	r3, r3, #26
 8001ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffa:	e015      	b.n	8002028 <HAL_ADC_ConfigChannel+0x500>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800200a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e003      	b.n	8002020 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	069b      	lsls	r3, r3, #26
 8002024:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x520>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	0e9b      	lsrs	r3, r3, #26
 800203a:	3301      	adds	r3, #1
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	e017      	b.n	8002078 <HAL_ADC_ConfigChannel+0x550>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002058:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800205a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e003      	b.n	800206c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	ea42 0103 	orr.w	r1, r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <HAL_ADC_ConfigChannel+0x576>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	3301      	adds	r3, #1
 8002090:	f003 021f 	and.w	r2, r3, #31
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	051b      	lsls	r3, r3, #20
 800209c:	e018      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x5a8>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e003      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80020ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d0:	430b      	orrs	r3, r1
 80020d2:	e07e      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x5c8>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	3301      	adds	r3, #1
 80020e8:	069b      	lsls	r3, r3, #26
 80020ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ee:	e015      	b.n	800211c <HAL_ADC_ConfigChannel+0x5f4>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	069b      	lsls	r3, r3, #26
 8002118:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_ADC_ConfigChannel+0x614>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0e9b      	lsrs	r3, r3, #26
 800212e:	3301      	adds	r3, #1
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	e017      	b.n	800216c <HAL_ADC_ConfigChannel+0x644>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	61fb      	str	r3, [r7, #28]
  return result;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	ea42 0103 	orr.w	r1, r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x670>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3b1e      	subs	r3, #30
 8002190:	051b      	lsls	r3, r3, #20
 8002192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002196:	e01b      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x6a8>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	613b      	str	r3, [r7, #16]
  return result;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e003      	b.n	80021bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 021f 	and.w	r2, r3, #31
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	3b1e      	subs	r3, #30
 80021ca:	051b      	lsls	r3, r3, #20
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d0:	430b      	orrs	r3, r1
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe ff4b 	bl	8001072 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_ADC_ConfigChannel+0x6e0>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80be 	beq.w	8002366 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f2:	d004      	beq.n	80021fe <HAL_ADC_ConfigChannel+0x6d6>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_ADC_ConfigChannel+0x6e4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x6ec>
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_ADC_ConfigChannel+0x6e8>)
 8002200:	e009      	b.n	8002216 <HAL_ADC_ConfigChannel+0x6ee>
 8002202:	bf00      	nop
 8002204:	407f0000 	.word	0x407f0000
 8002208:	80080000 	.word	0x80080000
 800220c:	50000100 	.word	0x50000100
 8002210:	50000300 	.word	0x50000300
 8002214:	4b59      	ldr	r3, [pc, #356]	; (800237c <HAL_ADC_ConfigChannel+0x854>)
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fe40 	bl	8000e9c <LL_ADC_GetCommonPathInternalCh>
 800221c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_ADC_ConfigChannel+0x858>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_ADC_ConfigChannel+0x70c>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a55      	ldr	r2, [pc, #340]	; (8002384 <HAL_ADC_ConfigChannel+0x85c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d13a      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002238:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d134      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002248:	d005      	beq.n	8002256 <HAL_ADC_ConfigChannel+0x72e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a4e      	ldr	r2, [pc, #312]	; (8002388 <HAL_ADC_ConfigChannel+0x860>)
 8002250:	4293      	cmp	r3, r2
 8002252:	f040 8085 	bne.w	8002360 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800225e:	d004      	beq.n	800226a <HAL_ADC_ConfigChannel+0x742>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a49      	ldr	r2, [pc, #292]	; (800238c <HAL_ADC_ConfigChannel+0x864>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x746>
 800226a:	4a49      	ldr	r2, [pc, #292]	; (8002390 <HAL_ADC_ConfigChannel+0x868>)
 800226c:	e000      	b.n	8002270 <HAL_ADC_ConfigChannel+0x748>
 800226e:	4a43      	ldr	r2, [pc, #268]	; (800237c <HAL_ADC_ConfigChannel+0x854>)
 8002270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002274:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7fe fdfb 	bl	8000e76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002280:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_ADC_ConfigChannel+0x86c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	099b      	lsrs	r3, r3, #6
 8002286:	4a44      	ldr	r2, [pc, #272]	; (8002398 <HAL_ADC_ConfigChannel+0x870>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800229a:	e002      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3b01      	subs	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f9      	bne.n	800229c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a8:	e05a      	b.n	8002360 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a3b      	ldr	r2, [pc, #236]	; (800239c <HAL_ADC_ConfigChannel+0x874>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d125      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x7d8>
 80022b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d11f      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a31      	ldr	r2, [pc, #196]	; (800238c <HAL_ADC_ConfigChannel+0x864>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d104      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x7ac>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_ADC_ConfigChannel+0x878>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d047      	beq.n	8002364 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_ConfigChannel+0x7c0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <HAL_ADC_ConfigChannel+0x864>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x7c4>
 80022e8:	4a29      	ldr	r2, [pc, #164]	; (8002390 <HAL_ADC_ConfigChannel+0x868>)
 80022ea:	e000      	b.n	80022ee <HAL_ADC_ConfigChannel+0x7c6>
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_ADC_ConfigChannel+0x854>)
 80022ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7fe fdbc 	bl	8000e76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022fe:	e031      	b.n	8002364 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_ADC_ConfigChannel+0x87c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12d      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800230a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d127      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1c      	ldr	r2, [pc, #112]	; (800238c <HAL_ADC_ConfigChannel+0x864>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002328:	d004      	beq.n	8002334 <HAL_ADC_ConfigChannel+0x80c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_ADC_ConfigChannel+0x864>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x810>
 8002334:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_ADC_ConfigChannel+0x868>)
 8002336:	e000      	b.n	800233a <HAL_ADC_ConfigChannel+0x812>
 8002338:	4a10      	ldr	r2, [pc, #64]	; (800237c <HAL_ADC_ConfigChannel+0x854>)
 800233a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe fd96 	bl	8000e76 <LL_ADC_SetCommonPathInternalCh>
 800234a:	e00c      	b.n	8002366 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800235e:	e002      	b.n	8002366 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002360:	bf00      	nop
 8002362:	e000      	b.n	8002366 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002364:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800236e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002372:	4618      	mov	r0, r3
 8002374:	37d8      	adds	r7, #216	; 0xd8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	50000700 	.word	0x50000700
 8002380:	c3210000 	.word	0xc3210000
 8002384:	90c00010 	.word	0x90c00010
 8002388:	50000600 	.word	0x50000600
 800238c:	50000100 	.word	0x50000100
 8002390:	50000300 	.word	0x50000300
 8002394:	20000050 	.word	0x20000050
 8002398:	053e2d63 	.word	0x053e2d63
 800239c:	c7520000 	.word	0xc7520000
 80023a0:	50000500 	.word	0x50000500
 80023a4:	cb840000 	.word	0xcb840000

080023a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe ff8a 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 80023c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe ffab 	bl	8001326 <LL_ADC_INJ_IsConversionOngoing>
 80023d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8098 	beq.w	8002510 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d02a      	beq.n	8002444 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7f5b      	ldrb	r3, [r3, #29]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d126      	bne.n	8002444 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d122      	bne.n	8002444 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80023fe:	2301      	movs	r3, #1
 8002400:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002402:	e014      	b.n	800242e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4a45      	ldr	r2, [pc, #276]	; (800251c <ADC_ConversionStop+0x174>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d90d      	bls.n	8002428 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e074      	b.n	8002512 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3301      	adds	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d1e3      	bne.n	8002404 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d014      	beq.n	8002474 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe ff42 	bl	80012d8 <LL_ADC_REG_IsConversionOngoing>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe feff 	bl	8001262 <LL_ADC_IsDisableOngoing>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe ff1e 	bl	80012b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d014      	beq.n	80024a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff51 	bl	8001326 <LL_ADC_INJ_IsConversionOngoing>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00c      	beq.n	80024a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fee7 	bl	8001262 <LL_ADC_IsDisableOngoing>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d104      	bne.n	80024a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe ff2d 	bl	80012fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d005      	beq.n	80024b6 <ADC_ConversionStop+0x10e>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d105      	bne.n	80024bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80024b0:	230c      	movs	r3, #12
 80024b2:	617b      	str	r3, [r7, #20]
        break;
 80024b4:	e005      	b.n	80024c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80024b6:	2308      	movs	r3, #8
 80024b8:	617b      	str	r3, [r7, #20]
        break;
 80024ba:	e002      	b.n	80024c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80024bc:	2304      	movs	r3, #4
 80024be:	617b      	str	r3, [r7, #20]
        break;
 80024c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80024c2:	f7fe fc97 	bl	8000df4 <HAL_GetTick>
 80024c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80024c8:	e01b      	b.n	8002502 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80024ca:	f7fe fc93 	bl	8000df4 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d914      	bls.n	8002502 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1dc      	bne.n	80024ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	a33fffff 	.word	0xa33fffff

08002520 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fe85 	bl	800123c <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d14d      	bne.n	80025d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <ADC_Enable+0xc0>)
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e039      	b.n	80025d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fe40 	bl	80011ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800256c:	f7fe fc42 	bl	8000df4 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002572:	e028      	b.n	80025c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fe5f 	bl	800123c <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fe2f 	bl	80011ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258e:	f7fe fc31 	bl	8000df4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00d      	beq.n	80025c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d1cf      	bne.n	8002574 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	8000003f 	.word	0x8000003f

080025e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fe36 	bl	8001262 <LL_ADC_IsDisableOngoing>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fe1d 	bl	800123c <LL_ADC_IsEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d047      	beq.n	8002698 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d144      	bne.n	8002698 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030d 	and.w	r3, r3, #13
 8002618:	2b01      	cmp	r3, #1
 800261a:	d10c      	bne.n	8002636 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fdf7 	bl	8001214 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2203      	movs	r2, #3
 800262c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800262e:	f7fe fbe1 	bl	8000df4 <HAL_GetTick>
 8002632:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002634:	e029      	b.n	800268a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e023      	b.n	800269a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002652:	f7fe fbcf 	bl	8000df4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d914      	bls.n	800268a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e007      	b.n	800269a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1dc      	bne.n	8002652 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <LL_ADC_IsEnabled>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <LL_ADC_IsEnabled+0x18>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <LL_ADC_IsEnabled+0x1a>
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_REG_IsConversionOngoing>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d101      	bne.n	80026e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b0a1      	sub	sp, #132	; 0x84
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800270a:	2302      	movs	r3, #2
 800270c:	e0e7      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002716:	2300      	movs	r3, #0
 8002718:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800271a:	2300      	movs	r3, #0
 800271c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002726:	d102      	bne.n	800272e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	e009      	b.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6e      	ldr	r2, [pc, #440]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002738:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	e001      	b.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0be      	b.n	80028de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ffb0 	bl	80026c8 <LL_ADC_REG_IsConversionOngoing>
 8002768:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff ffaa 	bl	80026c8 <LL_ADC_REG_IsConversionOngoing>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80a0 	bne.w	80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800277c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 809c 	bne.w	80028bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800278c:	d004      	beq.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a55      	ldr	r2, [pc, #340]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002798:	4b56      	ldr	r3, [pc, #344]	; (80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800279a:	e000      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800279c:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800279e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d04b      	beq.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ba:	035b      	lsls	r3, r3, #13
 80027bc:	430b      	orrs	r3, r1
 80027be:	431a      	orrs	r2, r3
 80027c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a45      	ldr	r2, [pc, #276]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10f      	bne.n	80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80027d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027dc:	f7ff ff61 	bl	80026a2 <LL_ADC_IsEnabled>
 80027e0:	4604      	mov	r4, r0
 80027e2:	4841      	ldr	r0, [pc, #260]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027e4:	f7ff ff5d 	bl	80026a2 <LL_ADC_IsEnabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4323      	orrs	r3, r4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e012      	b.n	800281e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80027f8:	483c      	ldr	r0, [pc, #240]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027fa:	f7ff ff52 	bl	80026a2 <LL_ADC_IsEnabled>
 80027fe:	4604      	mov	r4, r0
 8002800:	483b      	ldr	r0, [pc, #236]	; (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002802:	f7ff ff4e 	bl	80026a2 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	431c      	orrs	r4, r3
 800280a:	483c      	ldr	r0, [pc, #240]	; (80028fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800280c:	f7ff ff49 	bl	80026a2 <LL_ADC_IsEnabled>
 8002810:	4603      	mov	r3, r0
 8002812:	4323      	orrs	r3, r4
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d056      	beq.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800282a:	f023 030f 	bic.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	430a      	orrs	r2, r1
 8002838:	431a      	orrs	r2, r3
 800283a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800283e:	e047      	b.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800284a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002854:	d004      	beq.n	8002860 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10f      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002860:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002864:	f7ff ff1d 	bl	80026a2 <LL_ADC_IsEnabled>
 8002868:	4604      	mov	r4, r0
 800286a:	481f      	ldr	r0, [pc, #124]	; (80028e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800286c:	f7ff ff19 	bl	80026a2 <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	4323      	orrs	r3, r4
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002880:	481a      	ldr	r0, [pc, #104]	; (80028ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002882:	f7ff ff0e 	bl	80026a2 <LL_ADC_IsEnabled>
 8002886:	4604      	mov	r4, r0
 8002888:	4819      	ldr	r0, [pc, #100]	; (80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800288a:	f7ff ff0a 	bl	80026a2 <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	431c      	orrs	r4, r3
 8002892:	481a      	ldr	r0, [pc, #104]	; (80028fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002894:	f7ff ff05 	bl	80026a2 <LL_ADC_IsEnabled>
 8002898:	4603      	mov	r3, r0
 800289a:	4323      	orrs	r3, r4
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028b2:	f023 030f 	bic.w	r3, r3, #15
 80028b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80028b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028ba:	e009      	b.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028ce:	e000      	b.n	80028d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3784      	adds	r7, #132	; 0x84
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	50000100 	.word	0x50000100
 80028ec:	50000400 	.word	0x50000400
 80028f0:	50000500 	.word	0x50000500
 80028f4:	50000300 	.word	0x50000300
 80028f8:	50000700 	.word	0x50000700
 80028fc:	50000600 	.word	0x50000600

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac4:	f7ff ff40 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff ff90 	bl	80029f4 <NVIC_EncodePriority>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ada:	4611      	mov	r1, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff5f 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae2:	bf00      	nop
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff33 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ffa4 	bl	8002a5c <SysTick_Config>
 8002b14:	4603      	mov	r3, r0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e014      	b.n	8002b5a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	791b      	ldrb	r3, [r3, #4]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7fd ffef 	bl	8000b24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b087      	sub	sp, #28
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	e004      	b.n	8002b9c <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3314      	adds	r3, #20
 8002b9a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	795b      	ldrb	r3, [r3, #5]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_DAC_ConfigChannel+0x18>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e192      	b.n	8002ef2 <HAL_DAC_ConfigChannel+0x33e>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d174      	bne.n	8002cca <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002be0:	f7fe f908 	bl	8000df4 <HAL_GetTick>
 8002be4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d134      	bne.n	8002c56 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bec:	e011      	b.n	8002c12 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bee:	f7fe f901 	bl	8000df4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d90a      	bls.n	8002c12 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f043 0208 	orr.w	r2, r3, #8
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e16f      	b.n	8002ef2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e6      	bne.n	8002bee <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7fe f8f3 	bl	8000e0c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c30:	e01e      	b.n	8002c70 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c32:	f7fe f8df 	bl	8000df4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d90a      	bls.n	8002c56 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f043 0208 	orr.w	r2, r3, #8
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e14d      	b.n	8002ef2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dbe8      	blt.n	8002c32 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7fe f8d3 	bl	8000e0c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	ea02 0103 	and.w	r1, r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	409a      	lsls	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	21ff      	movs	r1, #255	; 0xff
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	ea02 0103 	and.w	r1, r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d11d      	bne.n	8002d0e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	221f      	movs	r2, #31
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	4013      	ands	r3, r2
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	4313      	orrs	r3, r2
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d26:	4013      	ands	r3, r2
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	e00f      	b.n	8002d58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d102      	bne.n	8002d46 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002d40:	2301      	movs	r3, #1
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	e008      	b.n	8002d58 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	e001      	b.n	8002d58 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	791b      	ldrb	r3, [r3, #4]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_DAC_ConfigChannel+0x1d8>
 8002d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8a:	e000      	b.n	8002d8e <HAL_DAC_ConfigChannel+0x1da>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da6:	4013      	ands	r3, r2
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	795b      	ldrb	r3, [r3, #5]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_DAC_ConfigChannel+0x204>
 8002db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db6:	e000      	b.n	8002dba <HAL_DAC_ConfigChannel+0x206>
 8002db8:	2300      	movs	r3, #0
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d114      	bne.n	8002dfa <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002dd0:	f000 ffc0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8002dd4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	4a48      	ldr	r2, [pc, #288]	; (8002efc <HAL_DAC_ConfigChannel+0x348>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d904      	bls.n	8002de8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e00f      	b.n	8002e08 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	4a45      	ldr	r2, [pc, #276]	; (8002f00 <HAL_DAC_ConfigChannel+0x34c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d90a      	bls.n	8002e06 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e006      	b.n	8002e08 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e00:	4313      	orrs	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	e000      	b.n	8002e08 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002e06:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	4313      	orrs	r3, r2
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6819      	ldr	r1, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	4313      	orrs	r3, r2
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	22c0      	movs	r2, #192	; 0xc0
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	400a      	ands	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	ea02 0103 	and.w	r1, r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3728      	adds	r7, #40	; 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	09896800 	.word	0x09896800
 8002f00:	04c4b400 	.word	0x04c4b400

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f12:	e15a      	b.n	80031ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 814c 	beq.w	80031c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d005      	beq.n	8002f44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d130      	bne.n	8002fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0201 	and.w	r2, r3, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d017      	beq.n	8002fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d123      	bne.n	8003036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	08da      	lsrs	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3208      	adds	r2, #8
 8002ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	220f      	movs	r2, #15
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0203 	and.w	r2, r3, #3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a6 	beq.w	80031c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003078:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <HAL_GPIO_Init+0x2e4>)
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	4a5a      	ldr	r2, [pc, #360]	; (80031e8 <HAL_GPIO_Init+0x2e4>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6613      	str	r3, [r2, #96]	; 0x60
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_GPIO_Init+0x2e4>)
 8003086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003090:	4a56      	ldr	r2, [pc, #344]	; (80031ec <HAL_GPIO_Init+0x2e8>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	3302      	adds	r3, #2
 8003098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	220f      	movs	r2, #15
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ba:	d01f      	beq.n	80030fc <HAL_GPIO_Init+0x1f8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a4c      	ldr	r2, [pc, #304]	; (80031f0 <HAL_GPIO_Init+0x2ec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d019      	beq.n	80030f8 <HAL_GPIO_Init+0x1f4>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <HAL_GPIO_Init+0x2f0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_GPIO_Init+0x1f0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <HAL_GPIO_Init+0x2f4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00d      	beq.n	80030f0 <HAL_GPIO_Init+0x1ec>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a49      	ldr	r2, [pc, #292]	; (80031fc <HAL_GPIO_Init+0x2f8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_GPIO_Init+0x1e8>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a48      	ldr	r2, [pc, #288]	; (8003200 <HAL_GPIO_Init+0x2fc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_GPIO_Init+0x1e4>
 80030e4:	2305      	movs	r3, #5
 80030e6:	e00a      	b.n	80030fe <HAL_GPIO_Init+0x1fa>
 80030e8:	2306      	movs	r3, #6
 80030ea:	e008      	b.n	80030fe <HAL_GPIO_Init+0x1fa>
 80030ec:	2304      	movs	r3, #4
 80030ee:	e006      	b.n	80030fe <HAL_GPIO_Init+0x1fa>
 80030f0:	2303      	movs	r3, #3
 80030f2:	e004      	b.n	80030fe <HAL_GPIO_Init+0x1fa>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e002      	b.n	80030fe <HAL_GPIO_Init+0x1fa>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_GPIO_Init+0x1fa>
 80030fc:	2300      	movs	r3, #0
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	f002 0203 	and.w	r2, r2, #3
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	4093      	lsls	r3, r2
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310e:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_GPIO_Init+0x2e8>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_GPIO_Init+0x300>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003140:	4a30      	ldr	r2, [pc, #192]	; (8003204 <HAL_GPIO_Init+0x300>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_GPIO_Init+0x300>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800316a:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_GPIO_Init+0x300>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_GPIO_Init+0x300>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_GPIO_Init+0x300>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_GPIO_Init+0x300>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_GPIO_Init+0x300>)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f ae9d 	bne.w	8002f14 <HAL_GPIO_Init+0x10>
  }
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40010000 	.word	0x40010000
 80031f0:	48000400 	.word	0x48000400
 80031f4:	48000800 	.word	0x48000800
 80031f8:	48000c00 	.word	0x48000c00
 80031fc:	48001000 	.word	0x48001000
 8003200:	48001400 	.word	0x48001400
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003224:	e002      	b.n	800322c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f806 	bl	8003268 <HAL_GPIO_EXTI_Callback>
  }
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d141      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800328e:	4b4b      	ldr	r3, [pc, #300]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329a:	d131      	bne.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800329c:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a2:	4a46      	ldr	r2, [pc, #280]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b4:	4a41      	ldr	r2, [pc, #260]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032bc:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2232      	movs	r2, #50	; 0x32
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0c9b      	lsrs	r3, r3, #18
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d2:	e002      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032da:	4b38      	ldr	r3, [pc, #224]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e6:	d102      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f2      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d158      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e057      	b.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003300:	4b2e      	ldr	r3, [pc, #184]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003306:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800330c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003310:	e04d      	b.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003318:	d141      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800331a:	4b28      	ldr	r3, [pc, #160]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d131      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332e:	4a23      	ldr	r2, [pc, #140]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003346:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2232      	movs	r2, #50	; 0x32
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	3301      	adds	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335e:	e002      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d102      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f2      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d112      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e011      	b.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003392:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800339c:	e007      	b.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40007000 	.word	0x40007000
 80033c0:	20000050 	.word	0x20000050
 80033c4:	431bde83 	.word	0x431bde83

080033c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	bf00      	nop
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40007000 	.word	0x40007000

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e306      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003406:	4b97      	ldr	r3, [pc, #604]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003410:	4b94      	ldr	r3, [pc, #592]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d102      	bne.n	8003426 <HAL_RCC_OscConfig+0x3e>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d002      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b8d      	ldr	r3, [pc, #564]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e2e1      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b85      	ldr	r3, [pc, #532]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a84      	ldr	r2, [pc, #528]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b7c      	ldr	r3, [pc, #496]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a7b      	ldr	r2, [pc, #492]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b78      	ldr	r3, [pc, #480]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a77      	ldr	r2, [pc, #476]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b75      	ldr	r3, [pc, #468]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a74      	ldr	r2, [pc, #464]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fca8 	bl	8000df4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fd fca4 	bl	8000df4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e2a6      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ba:	4b6a      	ldr	r3, [pc, #424]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fd fc94 	bl	8000df4 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fd fc90 	bl	8000df4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e292      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034e2:	4b60      	ldr	r3, [pc, #384]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d075      	beq.n	80035ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034fe:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003508:	4b56      	ldr	r3, [pc, #344]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x136>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d002      	beq.n	8003524 <HAL_RCC_OscConfig+0x13c>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d11f      	bne.n	8003564 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	4b4f      	ldr	r3, [pc, #316]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x154>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e265      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b49      	ldr	r3, [pc, #292]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	4946      	ldr	r1, [pc, #280]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003550:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_RCC_OscConfig+0x280>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fc01 	bl	8000d5c <HAL_InitTick>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d043      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e251      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a3c      	ldr	r2, [pc, #240]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd fc3c 	bl	8000df4 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7fd fc38 	bl	8000df4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e23a      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003592:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	492d      	ldr	r1, [pc, #180]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
 80035b2:	e01a      	b.n	80035ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fc18 	bl	8000df4 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fd fc14 	bl	8000df4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e216      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1e0>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d041      	beq.n	800367a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01c      	beq.n	8003638 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003604:	4a17      	ldr	r2, [pc, #92]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fd fbf1 	bl	8000df4 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003616:	f7fd fbed 	bl	8000df4 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1ef      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800362a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0ef      	beq.n	8003616 <HAL_RCC_OscConfig+0x22e>
 8003636:	e020      	b.n	800367a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	4a09      	ldr	r2, [pc, #36]	; (8003664 <HAL_RCC_OscConfig+0x27c>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd fbd4 	bl	8000df4 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800364e:	e00d      	b.n	800366c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd fbd0 	bl	8000df4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d906      	bls.n	800366c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1d2      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800366c:	4b8c      	ldr	r3, [pc, #560]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ea      	bne.n	8003650 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80a6 	beq.w	80037d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800368c:	4b84      	ldr	r3, [pc, #528]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_OscConfig+0x2b4>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x2b6>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a2:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
 80036ae:	4b7c      	ldr	r3, [pc, #496]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036ba:	2301      	movs	r3, #1
 80036bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036be:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <HAL_RCC_OscConfig+0x4bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d118      	bne.n	80036fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x4bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4bc>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d6:	f7fd fb8d 	bl	8000df4 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036de:	f7fd fb89 	bl	8000df4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e18b      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f0:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x4bc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d108      	bne.n	8003716 <HAL_RCC_OscConfig+0x32e>
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003714:	e024      	b.n	8003760 <HAL_RCC_OscConfig+0x378>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b05      	cmp	r3, #5
 800371c:	d110      	bne.n	8003740 <HAL_RCC_OscConfig+0x358>
 800371e:	4b60      	ldr	r3, [pc, #384]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	4a5e      	ldr	r2, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800372e:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003734:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800373e:	e00f      	b.n	8003760 <HAL_RCC_OscConfig+0x378>
 8003740:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	4a56      	ldr	r2, [pc, #344]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003750:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003758:	f023 0304 	bic.w	r3, r3, #4
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d016      	beq.n	8003796 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd fb44 	bl	8000df4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fd fb40 	bl	8000df4 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e140      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	4b46      	ldr	r3, [pc, #280]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ed      	beq.n	8003770 <HAL_RCC_OscConfig+0x388>
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fd fb2d 	bl	8000df4 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fd fb29 	bl	8000df4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e129      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ed      	bne.n	800379e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037cc:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03c      	beq.n	800385a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01c      	beq.n	8003822 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e8:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ee:	4a2c      	ldr	r2, [pc, #176]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fd fafc 	bl	8000df4 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003800:	f7fd faf8 	bl	8000df4 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0fa      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ef      	beq.n	8003800 <HAL_RCC_OscConfig+0x418>
 8003820:	e01b      	b.n	800385a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003828:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd fadf 	bl	8000df4 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800383a:	f7fd fadb 	bl	8000df4 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0dd      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800384e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1ef      	bne.n	800383a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 80d1 	beq.w	8003a06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b0c      	cmp	r3, #12
 800386e:	f000 808b 	beq.w	8003988 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d15e      	bne.n	8003938 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_RCC_OscConfig+0x4b8>)
 8003880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fd fab5 	bl	8000df4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	e00c      	b.n	80038a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388e:	f7fd fab1 	bl	8000df4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d905      	bls.n	80038a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0b3      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ec      	bne.n	800388e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b4:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	4b56      	ldr	r3, [pc, #344]	; (8003a14 <HAL_RCC_OscConfig+0x62c>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6a11      	ldr	r1, [r2, #32]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c4:	3a01      	subs	r2, #1
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	4311      	orrs	r1, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80038ce:	0212      	lsls	r2, r2, #8
 80038d0:	4311      	orrs	r1, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038d6:	0852      	lsrs	r2, r2, #1
 80038d8:	3a01      	subs	r2, #1
 80038da:	0552      	lsls	r2, r2, #21
 80038dc:	4311      	orrs	r1, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038e2:	0852      	lsrs	r2, r2, #1
 80038e4:	3a01      	subs	r2, #1
 80038e6:	0652      	lsls	r2, r2, #25
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038ee:	06d2      	lsls	r2, r2, #27
 80038f0:	430a      	orrs	r2, r1
 80038f2:	4947      	ldr	r1, [pc, #284]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b45      	ldr	r3, [pc, #276]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a44      	ldr	r2, [pc, #272]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 80038fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003902:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003904:	4b42      	ldr	r3, [pc, #264]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4a41      	ldr	r2, [pc, #260]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 800390a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800390e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fa70 	bl	8000df4 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003918:	f7fd fa6c 	bl	8000df4 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e06e      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x530>
 8003936:	e066      	b.n	8003a06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003938:	4b35      	ldr	r3, [pc, #212]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 800393e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003942:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 8003956:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800395a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fa48 	bl	8000df4 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fd fa44 	bl	8000df4 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e046      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x580>
 8003986:	e03e      	b.n	8003a06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e039      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003994:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <HAL_RCC_OscConfig+0x628>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0203 	and.w	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d12c      	bne.n	8003a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	3b01      	subs	r3, #1
 80039b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d123      	bne.n	8003a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d11b      	bne.n	8003a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d113      	bne.n	8003a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d001      	beq.n	8003a06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000
 8003a14:	019f800c 	.word	0x019f800c

08003a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e11e      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b91      	ldr	r3, [pc, #580]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d910      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b8e      	ldr	r3, [pc, #568]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 020f 	bic.w	r2, r3, #15
 8003a46:	498c      	ldr	r1, [pc, #560]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b8a      	ldr	r3, [pc, #552]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e106      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d073      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d129      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a74:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0f4      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a84:	f000 f99e 	bl	8003dc4 <RCC_GetSysClockFreqFromPLLSource>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4a7c      	ldr	r2, [pc, #496]	; (8003c80 <HAL_RCC_ClockConfig+0x268>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d93f      	bls.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a92:	4b7a      	ldr	r3, [pc, #488]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d033      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d12f      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ab2:	4b72      	ldr	r3, [pc, #456]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	4a70      	ldr	r2, [pc, #448]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e024      	b.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ad0:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d109      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0c6      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae0:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0be      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003af0:	f000 f8ce 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_RCC_ClockConfig+0x268>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d909      	bls.n	8003b12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003afe:	4b5f      	ldr	r3, [pc, #380]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b06:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b5a      	ldr	r3, [pc, #360]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4957      	ldr	r1, [pc, #348]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fd f966 	bl	8000df4 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd f962 	bl	8000df4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e095      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d023      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b6c:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a42      	ldr	r2, [pc, #264]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b84:	4b3d      	ldr	r3, [pc, #244]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b8c:	4a3b      	ldr	r2, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b94:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4936      	ldr	r1, [pc, #216]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d105      	bne.n	8003bba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bba:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d21d      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 020f 	bic.w	r2, r3, #15
 8003bd0:	4929      	ldr	r1, [pc, #164]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd f90c 	bl	8000df4 <HAL_GetTick>
 8003bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be0:	f7fd f908 	bl	8000df4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e03b      	b.n	8003c6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x260>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1ed      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4917      	ldr	r1, [pc, #92]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490f      	ldr	r1, [pc, #60]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c42:	f000 f825 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490c      	ldr	r1, [pc, #48]	; (8003c84 <HAL_RCC_ClockConfig+0x26c>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x270>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_RCC_ClockConfig+0x274>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd f878 	bl	8000d5c <HAL_InitTick>
 8003c6c:	4603      	mov	r3, r0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	04c4b400 	.word	0x04c4b400
 8003c84:	08004f64 	.word	0x08004f64
 8003c88:	20000050 	.word	0x20000050
 8003c8c:	20000054 	.word	0x20000054

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c96:	4b2c      	ldr	r3, [pc, #176]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d102      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ca2:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e047      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ca8:	4b27      	ldr	r3, [pc, #156]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cb4:	4b26      	ldr	r3, [pc, #152]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e03e      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cba:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d136      	bne.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d10c      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cee:	68d2      	ldr	r2, [r2, #12]
 8003cf0:	0a12      	lsrs	r2, r2, #8
 8003cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
      break;
 8003cfc:	e00c      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfe:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	0a12      	lsrs	r2, r2, #8
 8003d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d10:	fb02 f303 	mul.w	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
      break;
 8003d16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0e5b      	lsrs	r3, r3, #25
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	3301      	adds	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e001      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d38:	693b      	ldr	r3, [r7, #16]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	016e3600 	.word	0x016e3600

08003d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000050 	.word	0x20000050

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d70:	f7ff fff0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4904      	ldr	r1, [pc, #16]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08004f74 	.word	0x08004f74

08003d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d9c:	f7ff ffda 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0adb      	lsrs	r3, r3, #11
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4904      	ldr	r1, [pc, #16]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	08004f74 	.word	0x08004f74

08003dc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dca:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d10c      	bne.n	8003e02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003df2:	68d2      	ldr	r2, [r2, #12]
 8003df4:	0a12      	lsrs	r2, r2, #8
 8003df6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	617b      	str	r3, [r7, #20]
    break;
 8003e00:	e00c      	b.n	8003e1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e0c:	68d2      	ldr	r2, [r2, #12]
 8003e0e:	0a12      	lsrs	r2, r2, #8
 8003e10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e14:	fb02 f303 	mul.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
    break;
 8003e1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	0e5b      	lsrs	r3, r3, #25
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	3301      	adds	r3, #1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e36:	687b      	ldr	r3, [r7, #4]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40021000 	.word	0x40021000
 8003e48:	016e3600 	.word	0x016e3600
 8003e4c:	00f42400 	.word	0x00f42400

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8098 	beq.w	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	4a3f      	ldr	r2, [pc, #252]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8a:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e96:	2301      	movs	r3, #1
 8003e98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9a:	4b3a      	ldr	r3, [pc, #232]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a39      	ldr	r2, [pc, #228]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea6:	f7fc ffa5 	bl	8000df4 <HAL_GetTick>
 8003eaa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eac:	e009      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7fc ffa1 	bl	8000df4 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d902      	bls.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	74fb      	strb	r3, [r7, #19]
        break;
 8003ec0:	e005      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec2:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ef      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d159      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01e      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d019      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ef0:	4b23      	ldr	r3, [pc, #140]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	4a1b      	ldr	r2, [pc, #108]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fc ff61 	bl	8000df4 <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f34:	e00b      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fc ff5d 	bl	8000df4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d902      	bls.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f4c:	e006      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ec      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10b      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f78:	e008      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	74bb      	strb	r3, [r7, #18]
 8003f7e:	e005      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f8c:	7c7b      	ldrb	r3, [r7, #17]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d105      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f92:	4ba7      	ldr	r3, [pc, #668]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	4aa6      	ldr	r2, [pc, #664]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003faa:	4ba1      	ldr	r3, [pc, #644]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f023 0203 	bic.w	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	499d      	ldr	r1, [pc, #628]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fcc:	4b98      	ldr	r3, [pc, #608]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f023 020c 	bic.w	r2, r3, #12
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4995      	ldr	r1, [pc, #596]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fee:	4b90      	ldr	r3, [pc, #576]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	498c      	ldr	r1, [pc, #560]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004010:	4b87      	ldr	r3, [pc, #540]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	4984      	ldr	r1, [pc, #528]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004032:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	497b      	ldr	r1, [pc, #492]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004054:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	4973      	ldr	r1, [pc, #460]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004076:	4b6e      	ldr	r3, [pc, #440]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	496a      	ldr	r1, [pc, #424]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004098:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4962      	ldr	r1, [pc, #392]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	4959      	ldr	r1, [pc, #356]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040dc:	4b54      	ldr	r3, [pc, #336]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	4951      	ldr	r1, [pc, #324]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040fe:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	4948      	ldr	r1, [pc, #288]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4940      	ldr	r1, [pc, #256]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a3a      	ldr	r2, [pc, #232]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	4932      	ldr	r1, [pc, #200]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004190:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4924      	ldr	r1, [pc, #144]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041ae:	d105      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	4916      	ldr	r1, [pc, #88]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d019      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004200:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4908      	ldr	r1, [pc, #32]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421e:	d109      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a02      	ldr	r2, [pc, #8]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422a:	60d3      	str	r3, [r2, #12]
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	4926      	ldr	r1, [pc, #152]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004260:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004286:	4918      	ldr	r1, [pc, #96]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d105      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	490a      	ldr	r1, [pc, #40]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ce:	d105      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000

080042ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e042      	b.n	8004384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fc fc45 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	; 0x24
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f82c 	bl	800438c <UART_SetConfig>
 8004334:	4603      	mov	r3, r0
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e022      	b.n	8004384 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fb1c 	bl	8004984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800435a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800436a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fba3 	bl	8004ac8 <UART_CheckIdleState>
 8004382:	4603      	mov	r3, r0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004390:	b08c      	sub	sp, #48	; 0x30
 8004392:	af00      	add	r7, sp, #0
 8004394:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4baa      	ldr	r3, [pc, #680]	; (8004664 <UART_SetConfig+0x2d8>)
 80043bc:	4013      	ands	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a9f      	ldr	r2, [pc, #636]	; (8004668 <UART_SetConfig+0x2dc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f4:	4313      	orrs	r3, r2
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004402:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800440c:	430b      	orrs	r3, r1
 800440e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	f023 010f 	bic.w	r1, r3, #15
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a90      	ldr	r2, [pc, #576]	; (800466c <UART_SetConfig+0x2e0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d125      	bne.n	800447c <UART_SetConfig+0xf0>
 8004430:	4b8f      	ldr	r3, [pc, #572]	; (8004670 <UART_SetConfig+0x2e4>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b03      	cmp	r3, #3
 800443c:	d81a      	bhi.n	8004474 <UART_SetConfig+0xe8>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0xb8>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004455 	.word	0x08004455
 8004448:	08004465 	.word	0x08004465
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800446d 	.word	0x0800446d
 8004454:	2301      	movs	r3, #1
 8004456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445a:	e116      	b.n	800468a <UART_SetConfig+0x2fe>
 800445c:	2302      	movs	r3, #2
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004462:	e112      	b.n	800468a <UART_SetConfig+0x2fe>
 8004464:	2304      	movs	r3, #4
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446a:	e10e      	b.n	800468a <UART_SetConfig+0x2fe>
 800446c:	2308      	movs	r3, #8
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004472:	e10a      	b.n	800468a <UART_SetConfig+0x2fe>
 8004474:	2310      	movs	r3, #16
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800447a:	e106      	b.n	800468a <UART_SetConfig+0x2fe>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7c      	ldr	r2, [pc, #496]	; (8004674 <UART_SetConfig+0x2e8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d138      	bne.n	80044f8 <UART_SetConfig+0x16c>
 8004486:	4b7a      	ldr	r3, [pc, #488]	; (8004670 <UART_SetConfig+0x2e4>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d82d      	bhi.n	80044f0 <UART_SetConfig+0x164>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x110>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	080044f1 	.word	0x080044f1
 80044a8:	080044f1 	.word	0x080044f1
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080044f1 	.word	0x080044f1
 80044b4:	080044f1 	.word	0x080044f1
 80044b8:	080044f1 	.word	0x080044f1
 80044bc:	080044d9 	.word	0x080044d9
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044f1 	.word	0x080044f1
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044e9 	.word	0x080044e9
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d6:	e0d8      	b.n	800468a <UART_SetConfig+0x2fe>
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044de:	e0d4      	b.n	800468a <UART_SetConfig+0x2fe>
 80044e0:	2304      	movs	r3, #4
 80044e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e6:	e0d0      	b.n	800468a <UART_SetConfig+0x2fe>
 80044e8:	2308      	movs	r3, #8
 80044ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ee:	e0cc      	b.n	800468a <UART_SetConfig+0x2fe>
 80044f0:	2310      	movs	r3, #16
 80044f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f6:	e0c8      	b.n	800468a <UART_SetConfig+0x2fe>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a5e      	ldr	r2, [pc, #376]	; (8004678 <UART_SetConfig+0x2ec>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d125      	bne.n	800454e <UART_SetConfig+0x1c2>
 8004502:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <UART_SetConfig+0x2e4>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004508:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800450c:	2b30      	cmp	r3, #48	; 0x30
 800450e:	d016      	beq.n	800453e <UART_SetConfig+0x1b2>
 8004510:	2b30      	cmp	r3, #48	; 0x30
 8004512:	d818      	bhi.n	8004546 <UART_SetConfig+0x1ba>
 8004514:	2b20      	cmp	r3, #32
 8004516:	d00a      	beq.n	800452e <UART_SetConfig+0x1a2>
 8004518:	2b20      	cmp	r3, #32
 800451a:	d814      	bhi.n	8004546 <UART_SetConfig+0x1ba>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <UART_SetConfig+0x19a>
 8004520:	2b10      	cmp	r3, #16
 8004522:	d008      	beq.n	8004536 <UART_SetConfig+0x1aa>
 8004524:	e00f      	b.n	8004546 <UART_SetConfig+0x1ba>
 8004526:	2300      	movs	r3, #0
 8004528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452c:	e0ad      	b.n	800468a <UART_SetConfig+0x2fe>
 800452e:	2302      	movs	r3, #2
 8004530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004534:	e0a9      	b.n	800468a <UART_SetConfig+0x2fe>
 8004536:	2304      	movs	r3, #4
 8004538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453c:	e0a5      	b.n	800468a <UART_SetConfig+0x2fe>
 800453e:	2308      	movs	r3, #8
 8004540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004544:	e0a1      	b.n	800468a <UART_SetConfig+0x2fe>
 8004546:	2310      	movs	r3, #16
 8004548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454c:	e09d      	b.n	800468a <UART_SetConfig+0x2fe>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4a      	ldr	r2, [pc, #296]	; (800467c <UART_SetConfig+0x2f0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d125      	bne.n	80045a4 <UART_SetConfig+0x218>
 8004558:	4b45      	ldr	r3, [pc, #276]	; (8004670 <UART_SetConfig+0x2e4>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004562:	2bc0      	cmp	r3, #192	; 0xc0
 8004564:	d016      	beq.n	8004594 <UART_SetConfig+0x208>
 8004566:	2bc0      	cmp	r3, #192	; 0xc0
 8004568:	d818      	bhi.n	800459c <UART_SetConfig+0x210>
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d00a      	beq.n	8004584 <UART_SetConfig+0x1f8>
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d814      	bhi.n	800459c <UART_SetConfig+0x210>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <UART_SetConfig+0x1f0>
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d008      	beq.n	800458c <UART_SetConfig+0x200>
 800457a:	e00f      	b.n	800459c <UART_SetConfig+0x210>
 800457c:	2300      	movs	r3, #0
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e082      	b.n	800468a <UART_SetConfig+0x2fe>
 8004584:	2302      	movs	r3, #2
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e07e      	b.n	800468a <UART_SetConfig+0x2fe>
 800458c:	2304      	movs	r3, #4
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e07a      	b.n	800468a <UART_SetConfig+0x2fe>
 8004594:	2308      	movs	r3, #8
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e076      	b.n	800468a <UART_SetConfig+0x2fe>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e072      	b.n	800468a <UART_SetConfig+0x2fe>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a35      	ldr	r2, [pc, #212]	; (8004680 <UART_SetConfig+0x2f4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d12a      	bne.n	8004604 <UART_SetConfig+0x278>
 80045ae:	4b30      	ldr	r3, [pc, #192]	; (8004670 <UART_SetConfig+0x2e4>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045bc:	d01a      	beq.n	80045f4 <UART_SetConfig+0x268>
 80045be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c2:	d81b      	bhi.n	80045fc <UART_SetConfig+0x270>
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c8:	d00c      	beq.n	80045e4 <UART_SetConfig+0x258>
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ce:	d815      	bhi.n	80045fc <UART_SetConfig+0x270>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <UART_SetConfig+0x250>
 80045d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d8:	d008      	beq.n	80045ec <UART_SetConfig+0x260>
 80045da:	e00f      	b.n	80045fc <UART_SetConfig+0x270>
 80045dc:	2300      	movs	r3, #0
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e2:	e052      	b.n	800468a <UART_SetConfig+0x2fe>
 80045e4:	2302      	movs	r3, #2
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ea:	e04e      	b.n	800468a <UART_SetConfig+0x2fe>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f2:	e04a      	b.n	800468a <UART_SetConfig+0x2fe>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fa:	e046      	b.n	800468a <UART_SetConfig+0x2fe>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004602:	e042      	b.n	800468a <UART_SetConfig+0x2fe>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a17      	ldr	r2, [pc, #92]	; (8004668 <UART_SetConfig+0x2dc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d13a      	bne.n	8004684 <UART_SetConfig+0x2f8>
 800460e:	4b18      	ldr	r3, [pc, #96]	; (8004670 <UART_SetConfig+0x2e4>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800461c:	d01a      	beq.n	8004654 <UART_SetConfig+0x2c8>
 800461e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004622:	d81b      	bhi.n	800465c <UART_SetConfig+0x2d0>
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004628:	d00c      	beq.n	8004644 <UART_SetConfig+0x2b8>
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462e:	d815      	bhi.n	800465c <UART_SetConfig+0x2d0>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <UART_SetConfig+0x2b0>
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d008      	beq.n	800464c <UART_SetConfig+0x2c0>
 800463a:	e00f      	b.n	800465c <UART_SetConfig+0x2d0>
 800463c:	2300      	movs	r3, #0
 800463e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004642:	e022      	b.n	800468a <UART_SetConfig+0x2fe>
 8004644:	2302      	movs	r3, #2
 8004646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464a:	e01e      	b.n	800468a <UART_SetConfig+0x2fe>
 800464c:	2304      	movs	r3, #4
 800464e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004652:	e01a      	b.n	800468a <UART_SetConfig+0x2fe>
 8004654:	2308      	movs	r3, #8
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465a:	e016      	b.n	800468a <UART_SetConfig+0x2fe>
 800465c:	2310      	movs	r3, #16
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004662:	e012      	b.n	800468a <UART_SetConfig+0x2fe>
 8004664:	cfff69f3 	.word	0xcfff69f3
 8004668:	40008000 	.word	0x40008000
 800466c:	40013800 	.word	0x40013800
 8004670:	40021000 	.word	0x40021000
 8004674:	40004400 	.word	0x40004400
 8004678:	40004800 	.word	0x40004800
 800467c:	40004c00 	.word	0x40004c00
 8004680:	40005000 	.word	0x40005000
 8004684:	2310      	movs	r3, #16
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4aae      	ldr	r2, [pc, #696]	; (8004948 <UART_SetConfig+0x5bc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	f040 8097 	bne.w	80047c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800469a:	2b08      	cmp	r3, #8
 800469c:	d823      	bhi.n	80046e6 <UART_SetConfig+0x35a>
 800469e:	a201      	add	r2, pc, #4	; (adr r2, 80046a4 <UART_SetConfig+0x318>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046d7 	.word	0x080046d7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046e7 	.word	0x080046e7
 80046c0:	080046e7 	.word	0x080046e7
 80046c4:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c8:	f7ff fb50 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80046cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ce:	e010      	b.n	80046f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b9e      	ldr	r3, [pc, #632]	; (800494c <UART_SetConfig+0x5c0>)
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046d4:	e00d      	b.n	80046f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7ff fadb 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046dc:	e009      	b.n	80046f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046e4:	e005      	b.n	80046f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8130 	beq.w	800495a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	4a94      	ldr	r2, [pc, #592]	; (8004950 <UART_SetConfig+0x5c4>)
 8004700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004704:	461a      	mov	r2, r3
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	fbb3 f3f2 	udiv	r3, r3, r2
 800470c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	429a      	cmp	r2, r3
 800471c:	d305      	bcc.n	800472a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	429a      	cmp	r2, r3
 8004728:	d903      	bls.n	8004732 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004730:	e113      	b.n	800495a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	2200      	movs	r2, #0
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	60fa      	str	r2, [r7, #12]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	4a84      	ldr	r2, [pc, #528]	; (8004950 <UART_SetConfig+0x5c4>)
 8004740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004744:	b29b      	uxth	r3, r3
 8004746:	2200      	movs	r2, #0
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004754:	f7fb fd60 	bl	8000218 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	020b      	lsls	r3, r1, #8
 800476a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800476e:	0202      	lsls	r2, r0, #8
 8004770:	6979      	ldr	r1, [r7, #20]
 8004772:	6849      	ldr	r1, [r1, #4]
 8004774:	0849      	lsrs	r1, r1, #1
 8004776:	2000      	movs	r0, #0
 8004778:	460c      	mov	r4, r1
 800477a:	4605      	mov	r5, r0
 800477c:	eb12 0804 	adds.w	r8, r2, r4
 8004780:	eb43 0905 	adc.w	r9, r3, r5
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	469a      	mov	sl, r3
 800478c:	4693      	mov	fp, r2
 800478e:	4652      	mov	r2, sl
 8004790:	465b      	mov	r3, fp
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb fd3f 	bl	8000218 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4613      	mov	r3, r2
 80047a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a8:	d308      	bcc.n	80047bc <UART_SetConfig+0x430>
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b0:	d204      	bcs.n	80047bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	e0ce      	b.n	800495a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047c2:	e0ca      	b.n	800495a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047cc:	d166      	bne.n	800489c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d827      	bhi.n	8004826 <UART_SetConfig+0x49a>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0x450>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004817 	.word	0x08004817
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
 80047fc:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7ff fab4 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004806:	e014      	b.n	8004832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7ff fac6 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 800480c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800480e:	e010      	b.n	8004832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b4e      	ldr	r3, [pc, #312]	; (800494c <UART_SetConfig+0x5c0>)
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004814:	e00d      	b.n	8004832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7ff fa3b 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 800481a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800481c:	e009      	b.n	8004832 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004824:	e005      	b.n	8004832 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8090 	beq.w	800495a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	4a44      	ldr	r2, [pc, #272]	; (8004950 <UART_SetConfig+0x5c4>)
 8004840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004844:	461a      	mov	r2, r3
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	fbb3 f3f2 	udiv	r3, r3, r2
 800484c:	005a      	lsls	r2, r3, #1
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	441a      	add	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d916      	bls.n	8004894 <UART_SetConfig+0x508>
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486c:	d212      	bcs.n	8004894 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f023 030f 	bic.w	r3, r3, #15
 8004876:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	b29a      	uxth	r2, r3
 8004884:	8bfb      	ldrh	r3, [r7, #30]
 8004886:	4313      	orrs	r3, r2
 8004888:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	8bfa      	ldrh	r2, [r7, #30]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e062      	b.n	800495a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800489a:	e05e      	b.n	800495a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d828      	bhi.n	80048f6 <UART_SetConfig+0x56a>
 80048a4:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0x520>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048f7 	.word	0x080048f7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7ff fa4c 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048d6:	e014      	b.n	8004902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7ff fa5e 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <UART_SetConfig+0x5c0>)
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7ff f9d3 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 80048ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004900:	bf00      	nop
    }

    if (pclk != 0U)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	d028      	beq.n	800495a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	4a10      	ldr	r2, [pc, #64]	; (8004950 <UART_SetConfig+0x5c4>)
 800490e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004912:	461a      	mov	r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	fbb3 f2f2 	udiv	r2, r3, r2
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	441a      	add	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b0f      	cmp	r3, #15
 8004930:	d910      	bls.n	8004954 <UART_SetConfig+0x5c8>
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004938:	d20c      	bcs.n	8004954 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	b29a      	uxth	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e009      	b.n	800495a <UART_SetConfig+0x5ce>
 8004946:	bf00      	nop
 8004948:	40008000 	.word	0x40008000
 800494c:	00f42400 	.word	0x00f42400
 8004950:	08004f7c 	.word	0x08004f7c
      }
      else
      {
        ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2201      	movs	r2, #1
 800495e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2201      	movs	r2, #1
 8004966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004976:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800497a:	4618      	mov	r0, r3
 800497c:	3730      	adds	r7, #48	; 0x30
 800497e:	46bd      	mov	sp, r7
 8004980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	f003 0320 	and.w	r3, r3, #32
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01a      	beq.n	8004a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a82:	d10a      	bne.n	8004a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af02      	add	r7, sp, #8
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ad8:	f7fc f98c 	bl	8000df4 <HAL_GetTick>
 8004adc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d10e      	bne.n	8004b0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f82f 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e025      	b.n	8004b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d10e      	bne.n	8004b36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f819 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e00f      	b.n	8004b56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b09c      	sub	sp, #112	; 0x70
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6e:	e0a9      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	f000 80a5 	beq.w	8004cc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7a:	f7fc f93b 	bl	8000df4 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d302      	bcc.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d140      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004be2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004be4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e5      	bne.n	8004bc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e069      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d051      	beq.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2e:	d149      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c8c:	623a      	str	r2, [r7, #32]
 8004c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	69f9      	ldr	r1, [r7, #28]
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e010      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69da      	ldr	r2, [r3, #28]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f43f af46 	beq.w	8004b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3770      	adds	r7, #112	; 0x70
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e027      	b.n	8004d54 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	; 0x24
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e02d      	b.n	8004dd4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	; 0x24
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0201 	bic.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f84f 	bl	8004e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e02d      	b.n	8004e50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f811 	bl	8004e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d108      	bne.n	8004e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e78:	e031      	b.n	8004ede <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e7e:	2308      	movs	r3, #8
 8004e80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	0e5b      	lsrs	r3, r3, #25
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	0f5b      	lsrs	r3, r3, #29
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ea2:	7bbb      	ldrb	r3, [r7, #14]
 8004ea4:	7b3a      	ldrb	r2, [r7, #12]
 8004ea6:	4911      	ldr	r1, [pc, #68]	; (8004eec <UARTEx_SetNbDataToProcess+0x94>)
 8004ea8:	5c8a      	ldrb	r2, [r1, r2]
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eae:	7b3a      	ldrb	r2, [r7, #12]
 8004eb0:	490f      	ldr	r1, [pc, #60]	; (8004ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8004eb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	7b7a      	ldrb	r2, [r7, #13]
 8004ec4:	4909      	ldr	r1, [pc, #36]	; (8004eec <UARTEx_SetNbDataToProcess+0x94>)
 8004ec6:	5c8a      	ldrb	r2, [r1, r2]
 8004ec8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ecc:	7b7a      	ldrb	r2, [r7, #13]
 8004ece:	4908      	ldr	r1, [pc, #32]	; (8004ef0 <UARTEx_SetNbDataToProcess+0x98>)
 8004ed0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	08004f94 	.word	0x08004f94
 8004ef0:	08004f9c 	.word	0x08004f9c

08004ef4 <memset>:
 8004ef4:	4402      	add	r2, r0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d100      	bne.n	8004efe <memset+0xa>
 8004efc:	4770      	bx	lr
 8004efe:	f803 1b01 	strb.w	r1, [r3], #1
 8004f02:	e7f9      	b.n	8004ef8 <memset+0x4>

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4d0d      	ldr	r5, [pc, #52]	; (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	; (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4d0b      	ldr	r5, [pc, #44]	; (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	; (8004f48 <__libc_init_array+0x44>)
 8004f18:	f000 f818 	bl	8004f4c <_init>
 8004f1c:	1b64      	subs	r4, r4, r5
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2600      	movs	r6, #0
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08004fac 	.word	0x08004fac
 8004f40:	08004fac 	.word	0x08004fac
 8004f44:	08004fac 	.word	0x08004fac
 8004f48:	08004fb0 	.word	0x08004fb0

08004f4c <_init>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr

08004f58 <_fini>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	bf00      	nop
 8004f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5e:	bc08      	pop	{r3}
 8004f60:	469e      	mov	lr, r3
 8004f62:	4770      	bx	lr
